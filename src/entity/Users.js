import User from './User.js';

// TODO: Criar um Symbol para a propriedade privada 'kUsers'
const kUsers = Symbol('kUsers');
class Users {
  constructor() {
    // TODO: inicializar a propriedade privada 'kUsers' como uma estrutura importante vista no curso
    this[kUsers] = new Set();
    /*
      (Desafio opcional): Compensaria usar um WeakSet nesse caso?
      Resposta: nÃ£o, nesse caso mesmo que o fato do WeakSet lidar apenas com coleÃ§Ãµes de objetos e nÃ£o valores arbitrÃ¡rios de qualquer tipo nÃ£o seja um 
      problema para a nossa implementaÃ§Ã£o, o fato dos objetos nas coleÃ§Ãµes serem mantidos "fracamente" pode trazer efeitos colaterais inesperados, jÃ¡ que 
      quando nÃ£o hÃ¡ outra referÃªncia para um objeto mantido no WeakSet, ele pode ser coletado pelo Garbage collector (gerenciador de memÃ³ria).
      */
  }

  add(userRaw) {
    const user = new User(userRaw);
    // TODO: inserir valor na estrutura escolhida.
    this[kUsers].add(new User(user));
  }

  hasUsers() {
    // TODO: Como saber se tem informaÃ§Ã£o dentro da estrutura escolhida?
    return this[kUsers].size > 0;
  }

  // TODO: Me parece que o objeto gerado precisa ser iterÃ¡vel ğŸ¤”
  *[Symbol.iterator]() {
    for (const user of this[kUsers]) {
      yield user;
    }
  }
}

export default Users;
